
<!DOCTYPE html>
<head>
<meta charset="UTF-8">
<title>Windmills</title>
<script src="three.js"></script>
<script src="OrbitControls.js"></script>
<script>

"use strict";

let canvas, renderer, scene, camera; // Standard three.js requirements.

let controls;  // An OrbitControls object that is used to implement
               // rotation of the scene using the mouse.  (It actually rotates
               // the camera around the scene.)

let animating = false;  // Set to true when an animation is in progress.
let frameNumber = 0;  // Actually elapsed time in animation, in units of 1/60 second.

let vanes1, vanes2; // Animated objects.
     // earth, vanes2, vanes2 rotate.
     // moonOrbit is an extra THREE.Object3D for rotating the moon about the earth.


/**
 *  The render function draws the scene.
 */
function render() {
    renderer.render(scene, camera);
}


/**
 * This function is called by the init() method to create the world. 
 */
function createWorld() {
    
    renderer.setClearColor("black"); // Background color for scene.
    scene = new THREE.Scene();
    
    // ------------------- Make a camera with viewpoint light ----------------------
    
    camera = new THREE.PerspectiveCamera(30, canvas.width/canvas.height, 0.1, 100);
    camera.position.z = 30;
    let light;  // A light shining from the direction of the camera; moves with the camera.
    light = new THREE.DirectionalLight();
    light.position.set(0,0,1);
    camera.add(light);
    scene.add(camera);
    scene.add(new THREE.AmbientLight(0x202020));  // Add some ambient illumination.
    
    //------------------- Create the scene's visible objects ----------------------
    
    // earth = new THREE.Mesh(
    //     new THREE.SphereGeometry( 3,32,16 ),
    //     new THREE.MeshLambertMaterial({
    //         color: "white"
    //     })
    // );
    
    // let moon = new THREE.Mesh(
    //     new THREE.SphereGeometry( 3,32,16 ),
    //     new THREE.MeshLambertMaterial({
    //         color: "white"
    //     })
    // );
    // moon.position.x = 6;
    // moon.scale.set(0.4,0.4,0.4);
    
    // moonOrbit = new THREE.Object3D();
    // moonOrbit.add(moon);
    
    // scene.add(earth);
    // scene.add(moonOrbit);
    
    let v1 = new THREE.Mesh(   // A "vane" is a union of two cones, base-to-base.
        new THREE.ConeGeometry(0.5,3,16,3),
        new THREE.MeshPhongMaterial({
            color: 0x55AAFF,
            specular: 0x111111,
            shininess: 8
        })
    );
    let v2 = new THREE.Mesh(
        new THREE.ConeGeometry(0.5,1,16,3),
        v1.material // use the same material as for the first cone
    );
    v1.position.y = 2.5;
    v2.rotation.x = Math.PI; // v2 points in opposite direction from v1.
    v2.position.y = 0.5;
    let vane = new THREE.Object3D();
    vane.add(v1);
    vane.add(v2);
    vane.scale.z = 0.3; // Flatten it in the z-direction.
    
    vanes1 = new THREE.Object3D();  // Rotating vanes for first windmill.
    vanes1.add(vane.clone());
    vane.rotation.z = 2*Math.PI/3;
    vanes1.add(vane.clone());
    vane.rotation.z = -2*Math.PI/3;
    vanes1.add(vane.clone());
    vanes1.position.set(0,3.3,0.3);
    
    let pole = new THREE.Mesh(
        new THREE.CylinderGeometry(0.3,0.3,7,8,3),
        new THREE.MeshLambertMaterial({
            color: 0x994400
        })
    );

    // POSITION CONFIG
    pole.add(vanes1); // Add vanes to pole, so its now an entire windmill.
    pole.position.set(-10,0,0);
    pole.scale.set(0.9,0.9,0.9);
    
    let pole2 = pole.clone();
    vanes2 = pole2.children[0]; // This is the rotating vanes for the second windmill
    pole2.scale.set(0.9,0.9,0.9);
    pole2.position.set(10,0,0);
    
    scene.add(pole);
    scene.add(pole2);
    
    // ---- Start loading of textures; they will be applied when they are loaded --------
    
    // loadTextureFor("https://cdn.glitch.global/32d279e9-685f-4433-b6c4-23ff41ab9770/earth.jpg?v=1678209776666",earth);
    // loadTextureFor("https://cdn.glitch.global/fc018e22-1f8b-4b91-8782-a5f0c3e0984d/moon.jpg?v=1678213790185",moon);
    
} // end function createWorld()


/**
 *  This function is called once for each frame of the animation, before
 *  the render() function is called for that frame.  It updates any
 *  animated properties.  The value of the global variable frameNumber
 *  is incrementd 1 before this function is called.
 */
function updateForFrame() {
        
    // earth.rotation.set(0,frameNumber*0.05,0);
    // moonOrbit.rotation.y = frameNumber*0.013;
    
    vanes1.rotation.z += 0.05;
    vanes2.rotation.z -= 0.05;
}


/**
 * Start loading a texture from imageURL.  If additional parameeters are
 * present, they must be THREE.Object3D's, and the map property of each
 * object's material is set to the newly loaded texture.  The return
 * value of the function is the texture, to allow it to be used elsewhere
 */
function loadTextureFor(imageURL, ...objects) {
    function callback() {
        for (let object of objects) {
            object.material.map = texture;
            object.material.needsUpdate = true;
        }
        render();  // render scene with texture that has just been loaded.
    }
    let loader = new THREE.TextureLoader();
    let texture = loader.load(imageURL, callback);
    return texture;
}


/* ---------------------------- ANIMATION SUPPORT --------------------- */

let previousTime; // time when doFrame was last called

/*  Called when user changes setting of the Animate checkbox. */
function doAnimateCheckbox() {
   var run = document.getElementById("animateCheckbox").checked;
   if (run != animating) {
       animating = run;
       if (animating) {
           previousTime = -1; // for starting or restarting the animation
           requestAnimationFrame(doFrame);
       }
   }
}

/*  Drives the animation, called by system through requestAnimationFrame() */
function doFrame() {
    if (animating) {
        let time = Date.now();
        if (previousTime !== -1) {
            let elapsedTime = (time - previousTime)/1000; // time in seconds since previous frame
            frameNumber += elapsedTime*60; // elapsed time in units of 1/60 seconds
            updateForFrame();
            render();
        }
        previousTime = time;
        requestAnimationFrame(doFrame);
    }
}

/*----------------------------- INITIALIZATION ----------------------------------------

/**
 *  This function is called by the onload event so it will run after the
 *  page has loaded.  It creates the renderer, canvas, and scene objects,
 *  calls createWorld() to add objects to the scene, and renders the
 *  initial view of the scene.  If an error occurs, it is reported.
 */
function init() {
    try {
        canvas = document.getElementById("glcanvas");
        renderer = new THREE.WebGLRenderer({
            canvas: canvas,
            antialias: true,
            alpha: false
        });
    }
    catch (e) {
        document.getElementById("message").innerHTML="<b>Sorry, an error occurred:<br>" +
                e + "</b>";
        return;
    }
    document.getElementById("animateCheckbox").checked = false;
    document.getElementById("animateCheckbox").onchange = doAnimateCheckbox;
    document.getElementById("reset").onclick = function() { controls.reset(); };
    createWorld();
    controls = new THREE.OrbitControls(camera,canvas);
    controls.enablePan = false; 
    controls.enableZoom = false;
    controls.addEventListener("change",render);
    render();
}

window.onload = init;  // arrange for init() to be called when the page loads.

</script>
</head>
<body>

<h2>Three.js Modeling Demo: Windmills and Earth/Moon</h2>

<noscript>
   <p style="color: #AA0000; font-weight: bold">Sorry, but this page requires JavaScript!</p>
</noscript>

<p style="color:#AA0000; font-weight: bold" id="message">
</p>

<p style="color:#AA0000; font-weight: bold" id="message">
</p>

<p><b style="margin-left:50px">Use your mouse to rotate the model.</b></p>

<p>
   <label><input type="checkbox" id="animateCheckbox" style="margin-left:50px"><b>Animate</b></label>
   <button style="margin-left: 50px" id="reset">Reset Rotation</button>
</p>
<div id="canvas-holder" style="float:left; border: thin solid black; background-color: white">
   <canvas width=1200 height=600 id="glcanvas"></canvas>
</div>

</body>
</html>
