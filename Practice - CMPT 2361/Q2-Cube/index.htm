
<!DOCTYPE html>
<meta charset="UTF-8">
<html>
<head>
<title>Textures and glmatrix</title>
<style>
    body {
        background-color: #EEEEEE;
    }
</style>


<script src="gl-matrix.js"></script>

<script>

"use strict";


const vertexShaderSource = `
    attribute vec3 a_coords;
	// TO-DO: add an attribute for texture coordinates
    attribute vec2 a_texCoords;

    uniform mat4 u_transformMatrix; // projection * modelview
    uniform mat3 u_normalMatrix;
    uniform vec3 u_normal;
    uniform vec3 u_diffuse;
    varying vec4 v_color;
    // TO-DO: add a varying for texture coordinates
    varying vec2 v_texCoords;

    void main() {
        vec3 N = normalize( u_normalMatrix*u_normal );
        v_color = vec4( abs(N.z)*u_diffuse, 1.0 ); // implements very basic lighting

        // TO-DO:
        vec2 borderSize = vec2(0.1, 0.1);  // set the size of the border region
        v_texCoords = a_texCoords * (1.0 - 2.0 * borderSize) + borderSize;

       // v_texCoords = a_texCoords;


        vec4 coords4 = vec4(a_coords,1.0);
        gl_Position = u_transformMatrix * coords4;
    }`;


const fragmentShaderSource = `
    precision mediump float;
    varying vec4 v_color;

	// TO-DO: add a varying for texture coordinates
    varying vec2 v_texCoords;

	// TO-DO: add a sampler2D for texture color information
    uniform sampler2D u_sampler;


    void main() {

    	// TO-DO: Modify main() so that the surface color is 
    	// multiplied to the texture color obtained from
    	// texture2D().
        


        // vec4 texColor = texture2D( u_sampler, v_texCoords );

        vec2 wavyTexCoords = vec2(v_texCoords.x, v_texCoords.y + 0.005 * sin(50.0 * v_texCoords.x));
        vec4 texColor = texture2D(u_sampler, fract(wavyTexCoords));



		gl_FragColor = v_color * texColor;;
    }`;

let gl;   // The webgl context.
let uTransformMatrixLoc;  // Location of the uniform for the combined modelview / projection matrix.
let uNormalMatrixLoc;     // Location of the unifrom or the transform to be applied to normal vectors

const projection = mat4.create();    // projection matrix
const modelview = mat4.create();     // modelview matrix
const modelviewProj = mat4.create(); // combined projection / modelview transformation matrix
const normalMatrix = mat3.create();  // matrix, derived from modelview matrix, for transforming normal vectors

let rotateX = 0;   // rotation amount around the three axes, applied to entire cube,
let rotateY = 0;
let rotateZ = 0;

let textureObjects = [];  // Six texture objects to hold the six tectures.
const textureURLs = [
      "https://cdn.glitch.global/db01f8c0-ec61-4c43-beb1-5ec52f4550a2/posz.jpg?v=1680051001721",
      "https://cdn.glitch.global/db01f8c0-ec61-4c43-beb1-5ec52f4550a2/posx.jpg?v=1680050998020",
      "https://cdn.glitch.global/db01f8c0-ec61-4c43-beb1-5ec52f4550a2/negz.jpg?v=1680050996017",
      "https://cdn.glitch.global/db01f8c0-ec61-4c43-beb1-5ec52f4550a2/negx.jpg?v=1680050982292",
      "https://cdn.glitch.global/db01f8c0-ec61-4c43-beb1-5ec52f4550a2/posy.jpg?v=1680050999717",
      "https://cdn.glitch.global/db01f8c0-ec61-4c43-beb1-5ec52f4550a2/negy.jpg?v=1680050992911"
];

/* Draws a textured cube, where the images for the six faces are
 * the actually images designed to use as a cube map texture.
 */
function draw() { 
    gl.clearColor(0,0,0,1);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    
    /* Set up modelview to hold the viewing transform. */
    
    mat4.lookAt(modelview, [0,0,10], [0,0,0], [0,1,0]);
    mat4.rotateX(modelview, modelview, rotateX);
    mat4.rotateY(modelview, modelview, rotateY);
    mat4.rotateZ(modelview, modelview, rotateZ);
    
    /* TO-DO: Draw the six faces of the cube. */
    /* TO-DO: Use the correct element from textureObjects[] for each face. */
    // Save the viewing transformation.
    let saveMV = mat4.clone(modelview);  
    
    drawSquare(textureObjects[0]); // Front face.
    mat4.copy(modelview, saveMV);  // Reset modelview to be just the viewing transform.

    mat4.rotateY(modelview, modelview,Math.PI/2);
    drawSquare(textureObjects[1]); // rigth face.
    mat4.copy(modelview, saveMV); 

    mat4.rotateY(modelview, modelview,Math.PI); // Pi here
    drawSquare(textureObjects[2]); // back face.
    mat4.copy(modelview, saveMV); 

    mat4.rotateY(modelview, modelview,-Math.PI/2);
    drawSquare(textureObjects[3]); // left face.
    mat4.copy(modelview, saveMV); 

    mat4.rotateX(modelview, modelview,-Math.PI/2);
    drawSquare(textureObjects[4]); // top face.
    mat4.copy(modelview, saveMV); 

    mat4.rotateX(modelview, modelview,Math.PI/2);
    drawSquare(textureObjects[5]); // bottom face.

}

/**
 * Draw the 2-by-2 square in the PLANE z = 1 centered at the (0,0,1),
 * but subject to the combined projection and modelview transforms.
 * (The untransformed square is the front face of a cube with side 2.)
 * The vertex coords attribute was configured in initGL() and does
 * not change in this program.  Also, the white color and the normal
 * vector were set there, and do not change.
 */
// TO-DO: Modify the function to accept textureObj as input.
// Then, bind textureObj using gl.bindTexture() before the 
// call to gl.drawArrays().
function drawSquare(texObj) {
    // Send combined projection/modelview matrix to shader.
    mat4.multiply( modelviewProj, projection, modelview );
    gl.uniformMatrix4fv(uTransformMatrixLoc, false, modelviewProj );
    // Send normal matrix to the shader.
    mat3.normalFromMat4(normalMatrix, modelview);
    gl.uniformMatrix3fv(uNormalMatrixLoc, false, normalMatrix);

    // Do: bind the appropriate texture obj
    gl.bindTexture(gl.TEXTURE_2D, texObj);

    // Draw the 2-by-2 square.
    gl.drawArrays(gl.TRIANGLE_FAN,0,4);
}


/* Initialize the WebGL context.  Called from init() */
function initGL() {

    gl.enable(gl.DEPTH_TEST);
    
    let prog = createProgram( gl, vertexShaderSource, fragmentShaderSource );
    gl.useProgram(prog);

    /* Configure the unchanging color and normal uniform variables. */
    let uNormalLoc = gl.getUniformLocation(prog, "u_normal");
    gl.uniform3f(uNormalLoc, 0, 0, 1);
    let uDiffuseLoc = gl.getUniformLocation(prog, "u_diffuse");
    gl.uniform3f(uDiffuseLoc, 1, 1, 1);

    /* Configure the vertex coords attribute and load the data. */
    let aCoordsLoc = gl.getAttribLocation(prog, "a_coords");
    let coordsBuf = gl.createBuffer();
    gl.bindBuffer( gl.ARRAY_BUFFER, coordsBuf );
    let coords = new Float32Array( [ -1,-1,1, 1,-1,1, 1,1,1, -1,1,1 ] );
    gl.bufferData( gl.ARRAY_BUFFER, coords, gl.STATIC_DRAW );
    gl.vertexAttribPointer(aCoordsLoc, 3, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(aCoordsLoc);


        
    // TO-DO: Here, add the six commands required for supplying texture 
    // coordinates to the fragment shader.
    let aTexCoordsLoc = gl.getAttribLocation(prog, "a_texCoords");
    let tCoordsBuf = gl.createBuffer();
    gl.bindBuffer( gl.ARRAY_BUFFER, tCoordsBuf );

    let tCoords = new Float32Array( [ 0,0, 1,0, 1,1, 0,1 ] );

    // Add waviness to the texture coordinates
    for (let i = 0; i < tCoords.length; i += 2) {
  tCoords[i+1] += 0.01 * Math.sin(50.0 * tCoords[i]);
}


    gl.bufferData( gl.ARRAY_BUFFER, tCoords, gl.STATIC_DRAW );
    gl.vertexAttribPointer(aTexCoordsLoc, 2, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(aTexCoordsLoc);



    /* Make the projection matrix, which does not change. */    
    mat4.perspective(projection, Math.PI/8, 1, 5, 15);
    
    /* Get the locations of the two matrix uniform variables. */
    
    uTransformMatrixLoc = gl.getUniformLocation(prog, "u_transformMatrix");
    uNormalMatrixLoc = gl.getUniformLocation(prog, "u_normalMatrix");
    



    // TO-DO: Use a for-loop to create texture objects, bind them,  
    // load the them, and genereate a Mipmap for each texture image.
    // Make sure to call requestCORSIfNotSameOrigin(img, textureURLs[i]);
    // before setting img.src = textureURLs[i];
    gl.pixelStorei (gl.UNPACK_FLIP_Y_WEBGL, 1);
    let imgCt = 0;
    for (let i = 0; i < 6; i++) {
    let img = new Image();
    img.onload = function() {
        textureObjects[i] = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, textureObjects[i]);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img) ;
        gl.generateMipmap (gl.TEXTURE_2D);
        imgCt++;
        console.log("loaded texture", i);
            if (imgCt == 6) {
                draw();
            }
        };

    requestCORSIfNotSameOrigin(img, textureURLs[i]);
    img.src = textureURLs[i];

    }


}


/* Creates a program for use in the WebGL context gl, and returns the
 * identifier for that program.  If an error occurs while compiling or
 * linking the program, an exception of type Error is thrown.  The error
 * string contains the compilation or linking error.  If no error occurs,
 * the program identifier is the return value of the function.
 *    The second and third parameters are strings that contain the
 * source code for the vertex shader and for the fragment shader.
 */
function createProgram(gl, vShader, fShader) {
    let vsh = gl.createShader( gl.VERTEX_SHADER );
    gl.shaderSource(vsh,vShader);
    gl.compileShader(vsh);
    if ( ! gl.getShaderParameter(vsh, gl.COMPILE_STATUS) ) {
        throw new Error("Error in vertex shader:  " + gl.getShaderInfoLog(vsh));
     }
    let fsh = gl.createShader( gl.FRAGMENT_SHADER );
    gl.shaderSource(fsh, fShader);
    gl.compileShader(fsh);
    if ( ! gl.getShaderParameter(fsh, gl.COMPILE_STATUS) ) {
       throw new Error("Error in fragment shader:  " + gl.getShaderInfoLog(fsh));
    }
    let prog = gl.createProgram();
    gl.attachShader(prog,vsh);
    gl.attachShader(prog, fsh);
    gl.linkProgram(prog);
    if ( ! gl.getProgramParameter( prog, gl.LINK_STATUS) ) {
       throw new Error("Link error in program:  " + gl.getProgramInfoLog(prog));
    }
    return prog;
}


/**
 *  An event listener for the keydown event.  It is installed by the init() function.
 *  The arrow keys, PageUp, and PageDown will rotate the cube by modifying the
 *  modeling transformation.  Home and Return key resets the modeling transform
 *  to the identity.
 */
function doKey(evt) {
    let rotationChanged = true;
    switch (evt.keyCode) {
        case 37: rotateY -= 0.05; break;        // left arrow
        case 39: rotateY +=  0.05; break;       // right arrow
        case 38: rotateX -= 0.05; break;        // up arrow
        case 40: rotateX += 0.05; break;        // down arrow
        case 33: rotateZ += 0.05; break;        // PageUp
        case 34: rotateZ -= 0.05; break;        // PageDown
        case 13:                                // return key
        case 36: rotateX = rotateY = rotateZ = 0; break;  // home key
        default: rotationChanged = false;
     }
    if (rotationChanged) {
         evt.preventDefault();
         draw();
    }
}


/**
 * initialization function that will be called when the page has loaded
 */
function init() {
    try {
        let canvas = document.getElementById("webglcanvas");
        gl = canvas.getContext("webgl");
        if ( ! gl ) {
            throw "Browser does not support WebGL";
        }
    }
    catch (e) {
        document.getElementById("canvas-holder").innerHTML =
            "<p>Sorry, could not get a WebGL graphics context.</p>";
        return;
    }
    try {
        initGL();  // initialize the WebGL graphics context
    }
    catch (e) {
        document.getElementById("canvas-holder").innerHTML =
            "<p>Sorry, could not initialize the WebGL graphics context:" + e.message + "</p>";
        console.trace(e);
        return;
    }
    document.addEventListener("keydown", doKey, false);
    draw();
}

function requestCORSIfNotSameOrigin(img, url) {
  if ((new URL(url, window.location.href)).origin !== window.location.origin) {
    img.crossOrigin = "";
  }
}


window.onload = init;

</script>
</head>
<body>

<h2>A Textured Cube with Basic Lighting</h2>

<p id=message>Use arrow keys, PageUp, and PageDown to rotate the object.<br>
Home or Return key resets rotation to the identity.</p>


<noscript><hr><h3>This page requires Javascript and a web browser that supports WebGL</h3><hr></noscript>

<div id="canvas-holder">
   <canvas width=600 height=600 id="webglcanvas" style="background-color:red"></canvas>
</div>


</body>
</html>

